Pseudocode: Feature 04- Select Student Infos


database.pseudo
    // Create Query
    INPUT create_student_table_query: CREATE TABLE IF NOT EXISTS student (ATTRIBUTES)
    INPUT create_lesson_table_query: CREATE TABLE IF NOT EXISTS lesson (ATTRIBUTES)
    INPUT create_student_lesson_table_query: CREATE TABLE IF NOT EXISTS student_lesson (ATTRIBUTES)

    // Selecting Query
    Input get_student_infos_query: 
        SELECT 
            student.id AS student_id,
            student.first_name, 
            student.last_name, 
            student.age, 
            student.grade, 
            student.enrol_date,
            (
                SELECT GROUP_CONCAT(lesson.name, CHAR(13))
                FROM lesson
                JOIN student_lesson ON student_lesson.lesson_id = lesson.id
                WHERE student_lesson.student_id = student_id
            ) AS enrolled_lessons
        FROM student
        WHERE student_id = ?


    // Checking Query
    INPUT select_student_exist_query: SELECT EXISTS (SELECT 1 FROM student WHERE id = ?)
    
    // connect to db
    FUNCTION connect_to_db():
        Connect to database

    // create tables
    FUNCTION create_tables(connection):
        WITH connection to db
            Execute(create_student_table_query)
            Execute(create_lesson_table_query)
            Execute(create_student_lesson_table_query)

    // Select Student Info
    FUNCTION select_student_infos(student_id):
        student_infos = Execute(get_student_infos_query, student_id)
        RETURN student_infos


    // is student already exist:
    FUNCTION is_student_exist(student_id):
        INPUT result = Execute(select_student_exist_query, student_id)
        RETURN result

    // clean up database
    FUNCTION database_cleanup():
        commit database
        close database connection


app .pseudo:

    FROM database.pseudo IMPORT * AS db

    FUNCTION menu():
        INPUT student_detail, lessons_detail = prompt(
            "Press s to see student informations",
            Call feature4_select_student()
        )

    FUNCTION feature4_select_student():
        
        student_infos = []
        while (TRUE) {
            INPUT student_id
            

            IF student_id == 'c' THEN:
                CALL display_error_message("Operation canceled")
                RETURN
            ENDIF
            
            INPUT is_valid = Call validate_student_id(student_id)
    
            IF is_valid THEN:
                student_infos = db.select_student_infos(student_id)
                break
            ELSE
                CALL display_error_message(error)
                continue
            ENDIF   
        }

        CALL display_student_infos_table(student_infos)

    // Add Validation Logic
    FUNCTION validate_student_id(student_id):

        // User cannot enter empty messages
        IF student_id IS EMPTY:
            RAISE error
            RETURN FALSE
        ENDIF

        // Student ID can be only a number
        CALL validate_is_a_number(student_id)
    
        // User cannot update a student id doesn't exist
        IF NOT db.is_student_exist(student_id) THEN:
            RAISE error
            RETURN FALSE
        ENDIF

        Return TRUE
    
    // Make sure the record is a number
    FUNCTION validate_is_a_number(record):
        IF NOT record IS A NUMBER THEN:
            RAISE Error
            RETURN FALSE
        ENDIF
        RETURN
    
    // display a helpful messages to the user
    FUNCTION display_student_infos_table(student_infos):
        // Use tabulate: library to draw CL tables
        result = tabulate(student_infos)
        Print(result)

    FUNCTION display_error_message(error):
        Print "Error: $error"

    Call menu()