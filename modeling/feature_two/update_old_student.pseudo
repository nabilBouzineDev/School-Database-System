Pseudocode: Feature 02- Update old student

database.pseudo
    // Create Query
    INPUT create_student_table_query: CREATE TABLE IF NOT EXISTS student (ATTRIBUTES)
    INPUT create_lesson_table_query: CREATE TABLE IF NOT EXISTS lesson (ATTRIBUTES)
    INPUT create_student_lesson_table_query: CREATE TABLE IF NOT EXISTS student_lesson (ATTRIBUTES)

    // GET Specific Info Query
    INPUT get_lesson_id_by_name: SELECT id FROM lesson WHERE name = ?
    INPUT get_lesson_name_by_student_id: SELECT lesson.name FROM lesson JOIN student_lesson ON student_lesson.lesson_id = lesson.id WHERE student_lesson.student_id = ?

    // Checking Query
    INPUT select_student_exist_query: SELECT EXISTS (SELECT 1 FROM student WHERE id = ?)
    INPUT select_lesson_exist_query: SELECT EXISTS (SELECT 1 FROM lesson WHERE name = ?)
    INPUT select_student_lesson_exist_query: SELECT EXISTS (SELECT 1 FROM student_lesson WHERE name = ?)
    

    // Updating Query
    INPUT update_student_query: UPDATE student SET 
    INPUT update_lesson_query: Update lesson SET name = ? WHERE id = (SELECT lesson_id FROM student_lesson WHERE student_id = ? AND lesson_id = ?)

    // connect to db
    FUNCTION connect_to_db():
        Connect to database

    // create tables
    FUNCTION create_tables(connection):
        WITH connection to db
            Execute(create_student_table_query)
            Execute(create_lesson_table_query)
            Execute(create_student_lesson_table_query)

    // update student and lesson records:
    FUNCTION update_records(student_id, old_lesson_name, new_student_records, new_lesson_name):
        Call update_student(student_id, new_student_records)
        Call update_lesson(old_lesson_name, new_lesson_name, student_id)


    // build dynamic update student query and update student details:
    FUNCTION update_student(student_id, new_student_records):
        IF Call is_student_exist(student_id) THEN:
            
            FOR field, value IN new_student_records:
                update_student_query+= '${field} = "${value}", '
            
            update_student_query.removeLastTwoChars()
            update_student_query+= 'WHERE id = ?'
            Execute(update_student_query, student_id)
        ENDIF


    // update the lesson name
    FUNCTION update_lesson(old_lesson_name, new_lesson_name, student_id):
    IF Call is_lesson_exist(old_lesson_name) THEN:
        INPUT lesson_id = Call get_lesson_id_by_name(old_lesson_name)
        Execute(update_lesson_query, (new_lesson_name, student_id, lesson_id))
    ENDIF


    FUNCTION get_lesson_id_by_name(lesson_name):
        INPUT lesson_id = Execute(get_lesson_id_by_name, lesson_name)
        RETURN lesson_id

    // show list of available lessons 4 a student
    FUNCTION get_lesson_name_by_student_id(student_id)
        INPUT lessons = Execute(get_lesson_name_by_student_id, student_id)
        RETURN lessons


    // is student already exist:
    FUNCTION is_student_exist(student_id):
        INPUT result = Execute(select_student_exist_query, student_id)
        RETURN result

    // is lesson already exist:
    FUNCTION is_lesson_exist(lesson_name):
        INPUT result = Execute(select_lesson_exist_query, lesson_name)
        RETURN result


    // clean up database
    FUNCTION database_cleanup():
        commit database
        close database connection


app .pseudo:

    FROM database.pseudo IMPORT * AS db

    FUNCTION menu():
        INPUT student_detail, lessons_detail = prompt(
            "Press u to update a student",
            Call feature2_update_student()
        )
    
    FUNCTION prompt_avalaible_lessons(student_id):
       INPUT old_lesson_name = db.get_lesson_name_by_student_id(student_id)
       PRINT old_lesson_name
       RETURN old_lesson_name
       


    FUNCTION feature2_update_student():
        // student_details
        INPUT student_id
        INPUT first_name
        INPUT last_name
        INPUT age
        INPUT grade
        INPUT enrolled_date

        // lesson_details
        INPUT old_lesson_name = CALL prompt_avalaible_lessons(student_id)
        INPUT new_lesson_name

        INPUT records_details = {
            "student_id": student_id,
            "first_name": first_name,
            "last_name": last_name,
            "age": age,
            "grade": grade,
            "enrollment_date": enrollment_date,
            "lesson_names": lesson_names
        }

        INPUT is_valid = Call validate_records_details(records_details)

        IF is_valid THEN:
            db. (student_id, old_lesson_name, records_details["student_details"], records_details["lesson_names"]),
            CALL display_success_message()
        ELSE
            CALL display_error_message(error)
        ENDIF


    // handle student data integrity
    // Add Validation Logic
    FUNCTION validate_records_details(student_details, lesson_details):

        // User cannot enter empty messages
        IF student_details IS EMPTY or lesson_details IS EMPTY THEN:
            RAISE error
            RETURN FALSE
        ENDIF

        // Student ID can be only a number
        CALL validate_is_a_number(student_details.student_id)
    
        // User cannot update a student id doesn't exist
        IF NOT db.is_student_exist(student_detail.student_id) THEN:
            RAISE error
            RETURN FALSE
        ENDIF

        // Name can't be a number
        CALL validate_is_not_number(student_details.first_name)
        CALL validate_is_not_number(student_details.last_name)
        
        // Name can't be shorter than 3 charachters
        CALL validate_min_char_length(student_details.first_name)
        CALL validate_min_char_length(student_details.last_name)

        
        // Validation apply for last_name, grade end lesson name
        // Name can't be longer than 20 charachters
        CALL validate_max_char_length(student_details.first_name)
        CALL validate_max_char_length(student_details.last_name)
        CALL validate_max_char_length(student_details.grade)


        // Name can't inculde unwated chars
        CALL validate_unwanted_chars_removed(student_details.first_name)
        CALL validate_unwanted_chars_removed(student_details.last_name)
        CALL validate_unwanted_chars_removed(student_details.grade)
        
        // Age must be a number
        CALL validate_is_a_number(student_details.age)
        

        // Age must be between 5 and 35
        CALL validate_age_range(student_details.age):
            
        
        // validate lesson names
        INPUT validated_lesson_names = []
            
        FOR lesson IN lesson_names:
            // validate lesson
            INPUT lesson
            CALL validate_max_char_length(lesson)
            CALL validate_unwanted_chars_removed(lesson)
            validated_lesson_names.addToList(lesson)
        ENDFOR
        lesson_details.lesson_names = validated_lesson_names

        Return TRUE
    
    // Make sure the record is a number
    FUNCTION validate_is_a_number(record):
        IF record IS A NUMBER THEN:
            RAISE Error
            RETURN FALSE
        ENDIF
        RETURN

    // Make sure the record is a number
    FUNCTION validate_is_not_number(record):
        IF record IS NOT A NUMBER THEN:
            RAISE Error
            RETURN FALSE
        ENDIF
        RETURN
    
    // Make sure record char size more than 3
    FUNCTION validate_min_char_length(record):
        IF char_length(record) < 3 THEN:
            RAISE Error
            RETURN FALSE
        ENDIF
        RETURN

    // Make sure record char size more than 3
    FUNCTION validate_max_char_length(record):    
        IF char_length(record) >= 20 THEN:
            RAISE Error
            RETURN FALSE
        ENDIF
        RETURN

    // Make sure record doesn't include bad char
    FUNCTION validate_unwanted_chars_removed(record):    
        // List of unwanted characters for names
        INPUT not_allowed_chars = [ ";", "^"] // for example
        FOR char IN not_allowed_chars:
            IF char IN student_details.first_name THEN:
                RAISE Error
                RETURN FALSE
            ENDIF
        ENDFOR
        RETURN
    
    // Make sure record within valid range
    FUNCTION validate_age_range(record):
        IF record < 5 OR  record.age > 35 THEN:
            RAISE Error
            RETURN FALSE
        ENDIF 
        RETURN
    
    // display a helpful messages to the user
    FUNCTION display_success_message():
        PRINT "Student updated successfully!"

    FUNCTION display_error_message(error):
        Print "Error: $error"

    Call menu()